#! /usr/bin/perl

=head1 NAME

settings_backup - backup settings

=head1 SYNOPSIS

 https://server/schulkonsole/settings_backup

=head1 DESCRIPTION

C<settings_backup> lets you change the backup settings.
The HTML template is settings.shtml.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<settings_backup>
provides the following variables:

=over

=cut

use strict;
use lib '@datadir@/@PACKAGE@';
use open ':utf8';
use Env::Bash;
use Schulkonsole::Encode;
use Schulkonsole::Files;
use Schulkonsole::Session;


my $this_file = 'settings_backup';

my $backup_true = $Schulkonsole::Config::_backup_conf_true;
my $backup_false = $Schulkonsole::Config::_backup_conf_false;


my $sk_session = new Schulkonsole::Session($this_file);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();




# boolean values in backup.conf are represented with $backup_true and
# $backup_false in backup.conf

=item C<firewall>

True if firewall in F<backup.conf> is true

=item C<verify>

True if verify in F<backup.conf> is true

=item C<unmount>

True if unmount in F<backup.conf> is true

=itm C<cronbackup>

True if cronbackup in F<backup.conf> is true

=cut

my %backup_conf_bool_in_form = (
	firewall => 1,
	verify => 1,
	unmount => 1,
	cronbackup => 1,
);


my %backup_conf = read_backup_conf();
my %backup_conf_new;


if ($q->param('accept')) {
	eval {
	my @errors;
	foreach my $param ($q->param) {
		if (defined $backup_conf{$param}) {
			my $value = $q->param($param);
			if ($backup_conf_bool_in_form{$param}) {
				if ($value != $backup_conf{$param}) {
					$backup_conf_new{$param} = $value;
				}
			} else {
				$value =~ s/^\s*(.+?)\s*$/$1/;
				if ($backup_conf{$param} ne $value) {
					CHECKBACKUPVALUE: {
					$param eq 'backupdevice' and do {
						last CHECKBACKUPVALUE;
					};
					$param eq 'mountpoint' and do {
						last CHECKBACKUPVALUE;
					};
					$param eq 'restoremethod' and do {
						if (    $value ne 'hd'
						    and $value ne 'nfs') {
							$sk_session->mark_input_error('restoremethod');
							push @errors, $sk_session->d()->get(
								'Restoremethode muss hd oder nfs sein');
						}

						last CHECKBACKUPVALUE;
					};
					$param eq 'isoprefix' and do {
						last CHECKBACKUPVALUE;
					};
					$param eq 'mediasize' and do {
						last CHECKBACKUPVALUE;
					};
					(   $param eq 'includedirs'
					 or $param eq 'excludedirs') and do {
						my @dirs = split ',', $value;
						foreach my $dir (@dirs) {
							$dir =~ s/^\s*(.+?)\s*$/$1/;
						}
						$value = join ',', @dirs;

						last CHECKBACKUPVALUE;
					};
					$param eq 'services' and do {
						last CHECKBACKUPVALUE;
					};
					$param eq 'compression' and do {
						if ($value !~ /^\d$/) {
							$sk_session->mark_input_error('compression');
							push @errors, $sk_session->d()->get(
								'Erlaubte Werte f&uuml;r Kompressionsgrad sind 0 bis 9');
						}
						last CHECKBACKUPVALUE;
					};
					$param eq 'keepfull' and do {
						if ($value !~ /^[1-9]$/) {
							$sk_session->mark_input_error('keepfull');
							push @errors, $sk_session->d()->get(
								'Erwarte Zahl zwischen 1 und 9 bei Anzahl der vorgehaltenen Vollbackups');
						}
						last CHECKBACKUPVALUE;
					};
					$param eq 'keepdiff' and do {
						if ($value !~ /^[1-9]\d*$/) {
							$sk_session->mark_input_error('keepdiff');
							push @errors, $sk_session->d()->get(
								'Erwarte Zahl gr&ouml;&szlig;er gleich 1 bei Anzahl der vorgehaltenen differentiellen Backups');
						}
						last CHECKBACKUPVALUE;
					};
					$param eq 'keepinc' and do {
						if ($value !~ /^[1-9]\d*$/) {
							$sk_session->mark_input_error('keepfull');
							push @errors, $sk_session->d()->get(
								'Erwarte Zahl gr&ouml;&szlig;er gleich 1 bei Anzahl der vorgehaltenen inkrementellen Backups');
						}
						last CHECKBACKUPVALUE;
					};
					}
					$backup_conf_new{$param} = $value;
				}

			}
		}
	}

# unneccesary. Specification requires radio buttons
#	foreach my $param (keys %backup_conf_bool_in_form) {
#		if (    not defined $q->param($param)
#		    and $backup_conf{$param}) {
#			$backup_conf_new{$param} = 0;
#		}
#	}


	# commit changes
	if (@errors) {
		$sk_session->set_status(join(', ', @errors), 1);
	} else {
		my $is_changed = 0;

		if (%backup_conf_new) {
			my $lines = new_backup_lines(\%backup_conf_new, \%backup_conf);
			Schulkonsole::Files::write_backup_conf_file(
				$id, $password, $lines);

			$is_changed = 1;
		}

		if ($is_changed) {
			$sk_session->set_status(
				$sk_session->d()->get('&Auml;nderungen &uuml;bernommen'), 0);
		}
	}
	};
	if ($@) {
		$sk_session->standard_error_handling($this_file, $@);
	}
}



# pre-set values for <form>
foreach my $key (keys %backup_conf) {
	if (defined $backup_conf_new{$key}) {
		$q->param($key, $backup_conf_new{$key});
	} else {
		$q->param($key, $backup_conf{$key});
	}
}



my $server_name = $sk_session->{template_vars}{SERVER_NAME};
my $var_backupcron_link = "https://${server_name}:999/cron/";

=item C<backupcron_link>

URI to manage scheduled cron jobs

=cut

$sk_session->set_var('backupcron_link', $var_backupcron_link);





$sk_session->print_page("$this_file.shtml", $this_file);




=back

=head2 Form fields

=over

=item C<accept>

Write the changes

=cut



sub read_backup_conf {
	my %backup_env;
	tie %backup_env, 'Env::Bash',
		Source => $Schulkonsole::Config::_backup_conf_file;

=item C<backupdevice>

corresponds to backupdevice in F<backup.conf>

=item C<mountpoint>

corresponds to mountpoint in F<backup.conf>

=item C<restoremethod>

corresponds to restoremethod in F<backup.conf>

=item C<firewall>

true or false, corresponds to firewall in F<backup.conf>

=item C<verify>

true or false, corresponds to verify in F<backup.conf>

=item C<isoprefix>

corresponds to isoprefix in F<backup.conf>

=item C<mediasize>

corresponds to mediasize in F<backup.conf>

=item C<includedirs>

corresponds to includedirs in F<backup.conf>

=item C<excludedirs>

corresponds to excludedirs in F<backup.conf>

=item C<services>

corresponds to services in F<backup.conf>

=item C<compression>

corresponds to compression in F<backup.conf>

=item C<unmount>

true or false, corresponds to unmount in F<backup.conf>

=item C<keepfull>

corresponds to keepfull in F<backup.conf>

=item C<keepdiff>

corresponds to keepdiff in F<backup.conf>

=item C<keepinc>

corresponds to keepinc in F<backup.conf>

=item C<cronbackup>

true or false, corresponds to cronbackup in F<backup.conf>

=cut

	return (
		backupdevice => $backup_env{backupdevice},
		mountpoint => $backup_env{mountpoint},
		restoremethod => $backup_env{restoremethod},

		firewall => ($backup_env{firewall} eq $backup_true ? 1 : 0),

		verify => ($backup_env{verify} eq $backup_true ? 1 : 0),
		isoprefix => $backup_env{isoprefix},
		mediasize => $backup_env{mediasize},

		includedirs => $backup_env{includedirs},
		excludedirs => $backup_env{excludedirs},

		services => $backup_env{services},

		compression => int($backup_env{compression}),
		unmount => ($backup_env{unmount} eq $backup_true ? 1 : 0),
		keepfull => int($backup_env{keepfull}),
		keepdiff => int($backup_env{keepdiff}),
		keepinc => int($backup_env{keepinc}),
		cronbackup => ($backup_env{cronbackup} eq $backup_true ? 1 : 0),
	);
}





sub new_backup_lines {
	my $new = shift;
	my $old = shift;

	my %key_map = (
		backupdevice => 'backupdevice',
		mountpoint => 'mountpoint',
		restoremethod => 'restoremethod',

		firewall => 'firewall',

		verify => 'verify',
		isoprefix => 'isoprefix',
		mediasize => 'mediasize',

		includedirs => 'includedirs',
		excludedirs => 'excludedirs',

		services => 'services',

		compression => 'compression',
		unmount => 'unmount',
		keepfull => 'keepfull',
		keepdiff => 'keepdiff',
		keepinc => 'keepinc',
		cronbackup => 'cronbackup',
	);



	my %new = %$new;

	my @lines;
	if (open BACKUPCONF, '<',
	         Schulkonsole::Encode::to_fs(
	         	$Schulkonsole::Config::_backup_conf_file)) {

		while (my $line = <BACKUPCONF>) {
			foreach my $new_key (keys %new) {
				my $key = $key_map{$new_key};
				if ($line =~ /^\s*$key\s*=/) {
					# skip lines that are part of this key-value pair
					while ($line =~ /\\$/) {
						$line = <BACKUPCONF>;
					}

					my $value = $new{$new_key};
					if ($backup_conf_bool_in_form{$new_key}) {
						$value = ($value ? $backup_true : $backup_false);
					} else {
						$value = $new{$new_key};
					}

					if ($value ne "\Q$value") {
						$value =~ s/"/\\"/g;
						$line = "$key=\"$value\"\n";
					} else {
						$line = "$key=$value\n";
					}
					delete $new{$new_key};

					last;
				}
			}
			push @lines, $line;
		}

		close BACKUPCONF;
	}

	if (%new) {
		push @lines, "# schulkonsole\n";

		my $line;
		foreach my $new_key (keys %new) {
			my $value = $new{$new_key};
			if ($backup_conf_bool_in_form{$new_key}) {
				$value = ($value ? $backup_true : $backup_false);
			} else {
				$value = $new{$new_key};
			}

			push @lines, "$key_map{$new_key}=$value\n";
		}
	}


	return \@lines;
}

=back
