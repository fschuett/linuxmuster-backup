#! /usr/bin/perl

=head1 NAME

settings_backup - settings for backup

=head1 SYNOPSIS

 https://server/schulkonsole/settings_backup

=head1 DESCRIPTION

C<settings_backup> lets you change the settings of the backup.
The HTML template is settings_backup.tt.

=head2 Template variables

Additionally to the variables of Schulkonsole::Session C<settings_backup>
provides the following variables:

=over

=cut

use strict;
use lib '/usr/share/schulkonsole';
use open ':utf8';
use Env::Bash;
use Schulkonsole::Encode;
use Schulkonsole::Session;
use IPC::Open3;
use POSIX 'sys_wait_h';


my $this_file = 'settings_backup';
my $textdomain = 'linuxmuster-backup';

my $true = 'yes';
my $false = 'no';


my $sk_session = new Schulkonsole::Session($this_file,$textdomain);
if (not $sk_session->get_password()) {
	my $q = new CGI;
	my $url = $q->url( -full => 1 );

	# we send cookies over secure connections only
	if ($url =~ s/^http:/https:/g) {
		$sk_session->redirect($url);
	} else {
		$sk_session->exit_with_login_page($this_file);
	}
}

my $q = $sk_session->query();


my $id = $sk_session->userdata('id');
my $password = $sk_session->get_password();

my %backup_conf_bool_in_form = (
	firewall => 1,
	verify => 1,
	unmount => 1,
	cronbackup => 1,
);

my %backup_conf = read_backup_conf();
my %backup_conf_new;

if($q->param('accept')) {
    eval {
    my @errors;
    my $is_changed = 0;
    foreach my $param ($q->param) {
        if(defined $backup_conf{$param}) {
            if($backup_conf_bool_in_form{$param}) {
                if (not $backup_conf{$param}) {
                    $backup_conf_new{$param} = 1;
                    $is_changed = 1;
                }
            } else {
                my $value = $q->param($param);
                if ($backup_conf{$param} ne $value) {
                    CHECKVALUE: {
                        $param =~ /^restoremethod/ and do {
                            if($value ne 'hd' and $value ne 'nfs') {
                                $sk_session->mark_input_error('restoremethod');
                                push @errors, $sk_session->dplugin()->get('Restoremethode muss hd oder nfs sein');
                            }
                            last CHECKVALUE;
                        };
                        $param =~ /^(includedirs|excludedirs)/ and do {
                            my @dirs = split(',', $value);
                            foreach my $dir (@dirs) {
                                ($dir) = $dir =~ /^\s*(.*?)\s*/;
                            }
                            $value = join(',', @dirs);
                            last CHECKVALUE;
                        };
                        $param =~ /^compression/ and do {
                            if ($value !~ /^\s*[0-9]\s*$/) {
                                $sk_session->mark_input_error('compression');
                                push @errors, $sk_session->dplugin()->get(
                                            'Erlaubte Werte für Kompressionsgrad sind 0 bis 9');
                            }
                            last CHECKVALUE;
                        };
                        $param =~ /^keepfull/ and do {
                            if ($value !~ /^\s*[1-9]\s*$/) {
                                $sk_session->mark_input_error('keepfull');
                                push @errors, $sk_session->dplugin()->get(
                                            'Erwarte Zahl zwischen 1 und 9 bei Anzahl der vorgehaltenen Vollbackups');
                            }
                            last CHECKVALUE;
                        };
                        $param =~ /^keepdiff/ and do {
                            if ($value !~ /^\s*[1-9]\s*$/) {
                                $sk_session->mark_input_error('keepdiff');
                                push @errors, $sk_session->dplugin()->get(
                                            'Erwarte Zahl größer gleich 1 bei Anzahl der vorgehaltenen differentiellen Backups');
                            }
                            last CHECKVALUE;
                        };
                        $param =~ /^keepinc/ and do {
                            if ($value !~ /^\s*[1-9]\s*$/) {
                                $sk_session->mark_input_error('keepfull');
                                push @errors, $sk_session->dplugin()->get(
                                            'Erwarte Zahl größer gleich 1 bei Anzahl der vorgehaltenen inkrementellen Backups');
                            }
                            last CHECKVALUE;
                        };
                        }
                        $backup_conf_new{$param} = $q->param($param);
                        $is_changed = 1;
                }
            }
        }
    }

    # set undefined boolean values to false
    foreach my $param (keys %backup_conf_bool_in_form) {
            if (    not defined $q->param($param)
                and $backup_conf{$param}) {
                    $backup_conf_new{$param} = 0;
            }
    }

    # commit changes
    if (@errors) {
        $sk_session->set_status(join(', ', @errors), 1);
    } else {
        my $is_changed = 0;
        my $lines = new_backup_lines(\%backup_conf_new);
        write_backup_conf($id,$password,$lines);
        
        if ($is_changed) {
                $sk_session->set_status(
                        $sk_session->dplugin()->get('Änderungen übernommen'), 0);
        }
    }
    };
    if ($@) {
            $sk_session->standard_error_handling($this_file, $@);
    }
}

# pre-set values for <form>
my %backup_hash;
foreach my $key (keys %backup_conf) {
	if (defined $backup_conf_new{$key}) {
		if ($backup_conf_bool_in_form{$key}) {
			$backup_hash{$key}=to_bool($backup_conf_new{$key});
		} else {
			$backup_hash{$key}=$backup_conf_new{$key};
		}
	} else {
		if ($backup_conf_bool_in_form{$key}) {
			$backup_hash{$key}=to_bool($backup_conf{$key});
		} else {
			$backup_hash{$key}=$backup_conf{$key};
		}
	}
}

$sk_session->set_var("backup_conf",\%backup_hash);

$sk_session->print_page("$this_file.tt", $this_file);

=back

=head2 Form fields

=over

=item C<accept>

Write the changes

=cut


sub is_bool {
    my $param = shift;
    if($backup_conf_bool_in_form{$param}) {
        return 1;
    } else {
        return 0;
    }
}

sub to_bool {
    my $value = shift;
    if ($value =~ /^(1|true|on|yes|y)$/) { 
        return 1;
    } else {
        return 0;
    }
}

sub read_backup_conf {
	my %re;

	if (open BACKUPCONF, '<',
	         Schulkonsole::Encode::to_fs("/etc/linuxmuster/backup.conf")) {
		flock BACKUPCONF, 1;

		while (<BACKUPCONF>) {
			chomp;
			s/\s+//g;
			next if (not $_ or /^#/);

			my ($key, $value) = /^(\S+)=(\S+)$/;

			$re{$key} = $value;
		}

		close BACKUPCONF;
                
                foreach my $key (keys %re) {
                    if(is_bool($key)) {
                        $re{$key} = to_bool($re{$key});
                    }
                }


	} else {
		print STDERR "Cannot open /etc/linuxmuster/backup.conf\n";
	}

	return %re;
}

sub new_backup_lines {
    my $new = shift;
    if (open BACKUPCONF, '<',Schulkonsole::Encode::to_fs("/etc/linuxmuster/backup.conf")) {
        my @lines;
        my %new = %$new;

        while (my $line = <BACKUPCONF>) {
            foreach my $key (keys %new) {
                if ($line =~ /^\s*\Q$key\E\s*=/) {
                    my $value = $new{$key};
                    if (is_bool{$key}) {
                        $line = "$key='" . ($value ? $true : $false) . "'\n";
                    } else {
                        if ($value =~ /^\d+$/) {
                                $line = "$key=$value\n";
                        } else {
                                $line = "$key='$value'\n";
                        }
                    }
                    delete $new{$key};
                    last;
                }
            }
            push @lines, $line;
        }
        if (%new) {
                push @lines, "\n# schulkonsole\n";
                my $line;
                foreach my $key (keys %new) {
                        my $value = $new{$key};
                        if ($value =~ /^\d+$/) {
                                $line = "$key=$value\n";
                        } else {
                                $line = "$key='$value'\n";
                        }
                        push @lines, $line;
                }
        }
        return \@lines;
    } else {
            die "$0 Cannot open file /etc/linuxmuster/backup.conf";
    }
}

sub write_backup_conf {
	my $id = shift;
	my $password = shift;
	my $lines = shift;
	
	my $pid = start_wrapper('91001',$id, $password,	\*SCRIPTOUT, \*SCRIPTIN, \*SCRIPTIN);

	print SCRIPTOUT "1\n", join('', @$lines);
	close SCRIPTOUT;

	buffer_input(\*SCRIPTIN);

	stop_wrapper($pid, undef, \*SCRIPTIN, \*SCRIPTIN);
}

my $input_buffer;
sub buffer_input {
	my $in = shift;

	while (<$in>) {
		$input_buffer .= $_;
	}
}

sub start_wrapper {
	my $app_id = shift;
	my $id = shift;
	my $password = shift;
	my $out = shift;
	my $in = shift;
	my $err = shift;
	my $pid = IPC::Open3::open3 $out, $in, $err, "/usr/lib/schulkonsole/bin/wrapper-backup"
		or die "$0: $!";

	binmode $out, ':utf8';
	binmode $in, ':utf8';
	binmode $err, ':utf8';


	my $re = waitpid $pid, POSIX::WNOHANG;
	if (   $re == $pid
	    or $re == -1) {
		my $error = ($? >> 8) - 256;
		if ($error < -127) {
			die "$0: $!";
		} else {
			die "$0: $error /usr/lib/schulkonsole/bin/wrapper-backup";
		}
	}
	print $out "$id\n$password\n$app_id\n";
	return $pid;
}




sub stop_wrapper {
	my $pid = shift;
	my $out = shift;
	my $in = shift;
	my $err = shift;

	my $re = waitpid $pid, 0;
	if (    ($re == $pid or $re == -1)
	    and $?) {
		my $error = ($? >> 8);
		if ($error <= 128) {
			die "$0: $! " .	($input_buffer ? "Output: $input_buffer" : 'No Output');
		} else {
			$error -= 256;
			die "$0: $error";
		}
	}

	if ($out) {
		close $out
			or die "$0: $! " . ($input_buffer ? "Output: $input_buffer" : 'No Output');
	}

	close $in
		or die "$0: $! " . ($input_buffer ? "Output: $input_buffer" : 'No Output');

	undef $input_buffer;
}

=back
