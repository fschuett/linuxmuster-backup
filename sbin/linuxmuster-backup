#!/bin/sh
#
# /usr/sbin/linuxmuster-backup
# wrapper script for serverbackup with mondo
# tschmitt@linuxmuster.de
# fschuett@gymnasium-himmelsthuer.de
# $Id: linuxmuster-backup 1334 2012-07-20 12:03:39Z tschmitt $
#


# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit 1


# source helperfunctions
. $HELPERFUNCTIONS || exit 1

# default values
deplistdir=/etc/mindi/deplist.d
netconf=$deplistdir/net.conf
mondocache=/var/cache/mondo
cachefiles="difflevel.0"
verify=yes
isoprefix=server
mediasize=650
excludedirs="/var/tmp"
compression=3
keepfull=1
keepinc=7

# read config
[ -f /etc/linuxmuster/backup.conf ] && . /etc/linuxmuster/backup.conf

# parsing parameters
getopt $*


usage() {
  echo
  echo "Usage: linuxmuster-backup --full|--diff|--inc [options]"
  echo
  echo "Options:"
  echo "--backupdevice=device                : device is a hd partition or a nfs share,"
  echo "                                       e.g. /dev/sdb1 or 10.16.1.10:/home/nfs".
  echo "--mountpoint=directory               : directory where the device is mounted."
  echo "--restoremethod=hd|nfs               : where you plan to restore from."
  echo "--firewall=yes|no                    : whether to archive current firewall(ipcop,ipfire) settings."
  echo "--verify=yes|no                      : whether to verify data after backup."
  echo "--isoprefix=server                   : string which is used as a prefix for"
  echo "                                       the iso files and the folder."
  echo "--mediasize=4430                     : size of the iso files in mb."
  echo "--excludedirs=dir1,dir2,...          : directories to exclude from backup."
  echo "--includedirs=dir1,dir2,...          : directories to include in backup,"
  echo "                                       if not set the whole file system will be backed up."
  echo "--services=all|service1,service2,... : list of services in the current runlevel which"
  echo "                                       have to be stopped before backup begins,"
  echo "                                       <all> stops all services in the current runlevel,"
  echo "                                       if not set no service will be stopped."
  echo "--compression=3                      : compression level (0-9), 0 means no compression."
  echo "--unmount=yes|no                     : whether to unmount the backupdevice after backup."
  echo "--keepfull=1                         : how many full backup sets to keep"
  echo "--keepdiff=1                         : how many differential backup sets to keep."
  echo "--keepinc=7                          : how many incremental backup sets to keep."
  echo "                                       keep values have to be greater than 0."
  echo
  exit 1
}


# test options
[[ -n "$full" && -n "$inc" ]] && usage
[[ -n "$full" && -n "$diff" ]] && usage
[[ -n "$inc" && -n "$diff" ]] && usage
[[ -z "$backupdevice" || -z "$mountpoint" ]] && usage


# set mondoarchive parameter
if [ -n "$full" ]; then

	isinteger $keepfull || usage
	btypeparam="-O"
	btype=full
	msg="Full"

elif [ -n "$diff" ]; then

	isinteger $keepdiff || usage
	btypeparam="-D -O"
	btype=diff
	msg="Differential"

elif [ -n "$inc" ]; then

	isinteger $keepinc || usage
	btypeparam="-D -O"
	btype=inc
	msg="Incremental"

else

	usage

fi
[ "$verify" != "no" ] && btypeparam="${btypeparam} -V"
bfolder=${DATETIME}_${btype}


# warning
echo "$msg backup starts in 5 seconds! Press CTRL-C to cancel!"
sleep 5


# check if i am already running
mypid=$$
mypidfile=/var/run/linuxmuster-backup.pid
if [ -e "$mypidfile" ]; then
    echo "There is already a linuxmuster-backup process running! Exiting!"
    echo "If this is not correct you have to delete $mypidfile!"
    exit 0
fi
echo "$mypid" > $mypidfile


# exit with error
error() {
	echo "$1 Exiting!"
	rm $mypidfile
	exit 1
} # error

# create mountpoint if necessary
[ -d "$mountpoint" ] || mkdir -p $mountpoint
if [ ! -d "$mountpoint" ]; then
	error "Mountpoint $mountpoint does not exist!"
fi 

# check if backupdevice is already mounted
if mount | grep "$backupdevice" | grep -q "$mountpoint"; then

    echo "$backupdevice is already mounted on $mountpoint!"
    mounted=yes

fi


# mount if necessary and set params depending on restoremethod
case $restoremethod in

    hd)
	if [ -z "$mounted" ]; then
	    echo "Trying to mount $backupdevice on $mountpoint ..."
	    mount $backupdevice $mountpoint || error "Cannot mount $backupdevice!"
	    mounted=yes
	fi
	rtypeparam="-i"
	target=$mountpoint/$isoprefix/$bfolder
	;;

    nfs)
	if [ -z "$mounted" ]; then
	    echo "Trying to mount $backupdevice on $mountpoint ..."
	    mount -t nfs -o rsize=8192,wsize=8192 $backupdevice $mountpoint || error "Cannot mount $backupdevice!"
	    mounted=yes
	fi
	rtypeparam="-n $backupdevice"
	target=$isoprefix/$bfolder
	;;

    *)
	echo "Unknown restore method!"
	error
	;;

esac

if [ -n "$mounted" ]; then
	echo "$backupdevice successfully mounted on $mountpoint!"
else
	error "$backupdevice not mounted!"
fi


# storing runlevel
rl=`runlevel | awk '{ print $2 }'`


# remove mountpoint from excludedirs, will be added directly to mondoarchive parameters below (#458).
excludedirs="${excludedirs//$mountpoint/}"


# converting lists (see #462)
excludedirs="${excludedirs//,/|}"
includedirs="${includedirs//,/|}"
services="${services//,/ }"
upstartservices=
initdservices=

# split services in init.d, upstart
if [ -n "$services" ]; then
	echo "Splitting services..."
	if [ "$services" = "all" ]; then
		initctl list|grep "start/running"|grep -v "("| cut -f1|while read job; do upstartservices="$upstartservices $job"; done;
		if [ -z "$upstartservices" ]; then
			error "All services requested but no upstart services found! There must be an error!"
		fi
	else
		for s in $services; do
			if [ -L /etc/init.d/$s ]; then
				upstartservices="$upstartservices $s"
			elif [ -e /etc/init.d/$s ]; then
				initdservices="$initdservices $s"
			else
				error "Service $s is neither initd nor upstart service!"
				echo "Service $s is neither initd nor upstart service! I do ignore it for now."
			fi
		done
	fi
	
fi

# temp file for sorted services
sitmp=/var/tmp/tmp.initdservices.$mypid
[ -e "$sitmp" ] && rm $sitmp
sutmp=/var/tmp/tmp.upstartservices.$mypid
[ -e "$sutmp" ] && rm $sutmp


# included dirs?
# workaround mondoarchive segfault
[ "$includedirs" = "/" ] && includedirs=


# shut down services
if [ -n "$services" ]; then
	echo "Shutting down services ..."
	if [ "$services" = "all" ]; then
		for s in `ls -r /etc/rc${rl}.d/S*`; do
			$s stop
		done
	else
		for s in $upstartservices; do
			initctl show-config -e $s|grep "start on runlevel"|cut -d\[ -f2|cut -d\] -f1|grep -q 2 && echo $s >> $sutmp
		done
		if [ -s "$sutmp" ]; then
			for s in `cat $sutmp`; do
				initctl stop $s
			done
		else
			echo "No upstart services to shut down!"
		fi
		for s in $initdservices; do
			[ -e /etc/rc${rl}.d/S??${s} ] && echo /etc/rc${rl}.d/S??${s} >> $sitmp
		done
		if [ -s "$sitmp" ]; then
			for s in `sort -r $sitmp`; do
				$s stop
			done
		else
			echo "No initd services to shut down!"
		fi
	fi
fi


# start archiving process
echo
echo "Starting $msg backup process with following options:"
echo "  backupdevice=$backupdevice"
echo "  mountpoint=$mountpoint"
echo "  restoremethod=$restoremethod"
echo "  firewall=$firewall"
echo "  verify=$verify"
echo "  services=$services"
echo "  isoprefix=$isoprefix"
echo "  bfolder=$bfolder"
echo "  includedirs=$includedirs"
echo "  excludedirs=$excludedirs"
echo "  mediasize=$mediasize"
echo "  compression=$compression"
echo "  unmount=$unmount"
echo "  btypeparam=$btypeparam"
echo "  rtypeparam=$rtypeparam"
echo "  target=$target"
echo

# backup firewall settings
if [ "$firewall" = "yes" ]; then
	# test fwtype
	fwtype="$(get_fwtype)"
	echo "Will backup firewall type $fwtype..."

	case $fwtype in
	ipcop)
		if [ -e /usr/share/linuxmuster-ipcop/backup-settings.sh ]; then
			/usr/share/linuxmuster-ipcop/backup-settings.sh
			echo "Firewall backup completed."
		else
			echo "Firewall backup script for $fwtype not found. Omitting firewall backup."
		fi
		;;
	ipfire)
		if [ -e /usr/sbin/linuxmuster-ipfire ]; then
			/usr/sbin/linuxmuster-ipfire --backup
			echo "Firewall backup completed."
		else
			echo "Firewall backup script for $fwtype not found. Omitting firewall backup."
		fi
		;;
	*)
		echo "Wrong firewall type $fwtype, must be ipcop|ipfire. Omitting firewall backup."
		;;
	esac
fi

# storing backup time in unix format
backuptime=`date +%s`

RC=0

# determine last backup set
case $btype in
	diff)
		# difflevel of last full backup
		if sets=`ls -dr $mountpoint/$isoprefix/*-*_full`; then
			lastset=`echo $sets | awk '{ print $1 }'`
			echo "Found last full backup set in $lastset."
		else
			echo "Last full backup set not found!"
			RC=1
		fi
		;;
	inc)
		# difflevel of last backup (full, diff or inc)
		if sets=`ls -dr $mountpoint/$isoprefix/*-*_* | grep -G _[dfi][inu][cfl]`; then
			lastset=`echo $sets | awk '{ print $1 }'`
			echo "Found last backup set in $lastset."
		else
			echo "Last backup set not found!"
			RC=1
		fi
		;;
	*)
		;;
esac

# restore mondo-archive cache if no full backup
if [ "$btype" != "full" ]; then
	if [ -d "$lastset/cache" ]; then
		# test if all cachefiles are present
		echo "Testing cachefiles in $lastset/cache ..."
		for i in $cachefiles; do
			[ -e "$lastset/cache/$i" ] || RC=1
		done
		if [ "$RC" -eq 0 ]; then
			echo "Restoring cache from $lastset/cache ..."
			rsync -a --delete $lastset/cache/ $mondocache/
		else
			echo "At least one of $cachefiles is missing!"
			echo "Cannot restore cache!"
		fi
	else
		echo "$lastset/cache does not exist! Cannot restore cache!"
		RC=1
	fi
fi


# create backup folder if necessary
[ -d "$mountpoint/$isoprefix/$bfolder/cache" ] || mkdir -p $mountpoint/$isoprefix/$bfolder/cache
if [ ! -d "$mountpoint/$isoprefix/$bfolder/cache" ]; then
	[ -d "$mountpoint/$isoprefix/$bfolder" ] && rm -rf $mountpoint/$isoprefix/$bfolder
	echo "Cache directory $mountpoint/$isoprefix/$bfolder/cache does not exist!"
	RC=1
fi 


# remove backupdevice from fstab
if [ $RC -eq 0 ]; then
	if grep -q ^$backupdevice /etc/fstab; then
		echo "Removing backup device $backupdevice from /etc/fstab!"
		fstabtmp=/var/tmp/fstab.$$
		cp -f /etc/fstab $fstabtmp || RC=1
		grep -v $backupdevice $fstabtmp > /etc/fstab || RC=1
	fi
fi


# portmap is needed in mondorescue's iso file system
[ -d "$deplistdir" ] || mkdir -p $deplistdir
[ -e "$netconf" ] || touch "$netconf"
if ! grep -q ^/sbin/portmap "$netconf"; then
 echo "Adding /sbin/portmap to $netconf ..."
 echo "/sbin/portmap" >> "$netconf"
fi

# specify kernel manually (from kernel > 3.8)
kernelver=$(uname -r)
kernelver1=${kernelver%%.*}
kernelver2=${kernelver#*.}
kernelver2=${kernelver2%%.*}
kernelmanual=
if [  -n "$kernelver1" -a -n "$kernelver2" ]; then
 if [ $kernelver1 -ge 3 -a $kernelver2 -gt 8 ]; then
  kernelmanual="-k /boot/vmlinuz-$(uname -r)"
 fi
else
 RC=1
fi

# starting mondoarchive
if [ $RC -eq 0 ]; then
	if [ -z "$includedirs" ]; then
		nice -n 19 mondoarchive $btypeparam -p $isoprefix $rtypeparam -E "${mountpoint}|${excludedirs}" -N -d $target -s ${mediasize}m -$compression -L $kernelmanual
	else
		nice -n 19 mondoarchive $btypeparam -p $isoprefix $rtypeparam -I "$includedirs" -E "${mountpoint}|${excludedirs}" -N -d $target -s ${mediasize}m -$compression -L $kernelmanual
	fi
	RC=$?
fi


# restoring fstab
if [ -n "$fstabtmp" -a -e "$fstabtmp" ]; then
	echo "Restoring /etc/fstab!"
	mv -f $fstabtmp /etc/fstab
fi


# if mondoarchive exits cleanly
if [ "$RC" = "0" ]; then

	echo "mondoarchive finished successfully!"

	# store cache files
	echo "Storing cache to $mountpoint/$isoprefix/$bfolder/cache ..."
	rsync -a --delete $mondocache/ $mountpoint/$isoprefix/$bfolder/cache/

	case $btype in

		full)
			# copying mondorescue.iso to backup folder if it is a full backup
			if [ -f /var/cache/mindi/mondorescue.iso ]; then
				# mindi 2.22, new location for mindi files
				mondoiso=/var/cache/mindi/mondorescue.iso
			elif [ -f /root/images/mindi/mondorescue.iso ]; then
				mondoiso=/root/images/mindi/mondorescue.iso
			fi
			if [ -n "$mondoiso" ]; then
				echo "Copying mondorescue.iso to $mountpoint/$isoprefix/$bfolder ..."
				cp -a $mondoiso $mountpoint/$isoprefix/$bfolder
			else
				echo "Fatal! Cannot find mondorescue.iso!"
				RC=1
			fi
			setstokeep=$keepfull
			;;

		diff)
			setstokeep=$keepdiff
			# store difflevel
			echo $backuptime > $mountpoint/$isoprefix/$bfolder/cache/difflevel.0
			;;

		inc)
			setstokeep=$keepinc
			echo $backuptime > $mountpoint/$isoprefix/$bfolder/cache/difflevel.0
			;;

	esac

	# cleaning up backup sets
	if sets=`ls -dr $mountpoint/$isoprefix/*_$btype`; then

		n=1
		echo "Keeping $setstokeep $btype backup sets."

		for s in $sets; do

			if [ "$n" -gt "$setstokeep" ]; then

				echo "Deleting $btype backup set "$s" ..."
				rm -rf $s

			fi

			let n+=1

		done

	fi

else

	echo "Mondoarchive finished with error!"

	if mount | grep mondo | grep -q tmpfs; then

		echo "Unmounting shared memory ..."
		umount /dev/shm

	fi

	if [ -d "$mountpoint/$isoprefix/$bfolder" ]; then

		echo "Removing $mountpoint/$isoprefix/$bfolder ..."
		rm -rf $mountpoint/$isoprefix/$bfolder

	fi

fi # RC = 0


# cleaning up tmp dirs
for i in $mountpoint /home; do

	echo "Cleaning up tmp dirs on $i ..."
	rm -rf $i/mondo.scratch.*
	rm -rf $i/tmp.mondo.*

done


# linking backup mountpoint to administrator's home
[ -L "$ADMINSHOME/$ADMINISTRATOR/_backup" ] && rm $ADMINSHOME/$ADMINISTRATOR/_backup
ln -s $mountpoint $ADMINSHOME/$ADMINISTRATOR/_backup


# unmounting backup media if requested
if [ "$unmount" = "yes" ]; then

    echo "Trying to unmount $backupdevice as requested ..."
    umount $backupdevice && echo "Successfully unmounted $backupdevice!"

else

    echo "Not unmounting $backupdevice as requested!"

fi


# start services again
if [ -n "$services" ]; then
	echo "Starting services again ..."
	if [ "$services" = "all" ]; then
		for s in /etc/rc${rl}.d/S*; do
			$s start
		done
	else
		if [ -s "$sitmp" ]; then
			for s in `sort $sitmp`; do
				$s start
			done
		else
			echo "No initd services to start!"
		fi
		if [ -s "$sutmp" ]; then
			for s in `cat $sutmp`; do
				initctl start $s
			done
		else
			echo "No upstart services to start!"
		fi
	fi

fi


# delete temp files
[ -e "$sitmp" ] && rm $sitmp
[ -e "$sutmp" ] && rm $sutmp
rm $mypidfile


# logging exit status
echo $RC > $LOGDIR/linuxmuster-backup.status


# all done
if [ "$RC" = "0" ]; then
	echo "Done! :-)"
else
	echo "Done with mondoarchive error! :-("
fi


exit $RC

